datasource db {
  provider = "sqlite"
  url      = "file:./data/getter-robo.sqlite"
}

generator client {
  provider = "prisma-client-js"
}

model Anime {
  createdAt     DateTime      @default(now())
  newestEpisode DateTime      @default(now())
  name          String        @id
  episodes      Episode[]
  torrents      Torrent[]
  subbers       AnimeSubber[]
  images        AnimeImage[]
  mainImage     AnimeImage?   @relation("mainImage", fields: [mainImageId], references: [id])
  mainImageId   Int?
}

model AnimeImage {
  id        Int      @default(autoincrement())
  anime     Anime    @relation(fields: [animeName], references: [name])
  animeName String
  url       String
  createdAt DateTime @default(now())

  mainImageFor Anime[] @relation("mainImage")

  @@id([id])
  @@unique([animeName, url])
}

model AnimeSubber {
  anime      Anime  @relation(fields: [animeName], references: [name])
  animeName  String
  subber     Subber @relation(fields: [subberName], references: [name])
  subberName String

  autodownload Boolean @default(false)

  @@id([animeName, subberName])
}

model Episode {
  anime     Anime    @relation(fields: [animeName], references: [name])
  animeName String
  episode   String
  createdAt DateTime @default(now())

  torrents Torrent[]
  @@id([animeName, episode])
}

model Subber {
  name      String        @id
  torrents  Torrent[]
  createdAt DateTime      @default(now())
  subbers   AnimeSubber[]
}

model Torrent {
  infoHash      String    @id
  title         String
  link          String    @unique
  pubDate       DateTime
  guid          String    @unique
  resolution    Int
  extention     String
  subberName    String
  animeName     String
  anime         Anime     @relation(fields: [animeName], references: [name])
  episode       Episode   @relation(fields: [animeName, episodeString], references: [animeName, episode])
  subber        Subber    @relation(fields: [subberName], references: [name])
  episodeString String
  downloadAt    DateTime?
}
